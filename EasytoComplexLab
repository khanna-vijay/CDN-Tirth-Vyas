Backend work

-	Create the following folders/file in your s3 bucket to mimic a complex directory on a traditional webserver: /test/1/2/3/cat.jpg 
-	You can install cat.jpg from https://github.com/stuffbyt/re-Invent2019BuildersSession
-	Upload the cat.jpg inside test/1/2/3/ folder. 

Creating a Lambda Function

-	Login to your AWS Lambda console in in us-east-1 region
-	Click on Crate Function and then select Author from Scratch
-	Give your function a name and select runtime nodejs 8.10
-	For Permissions, select, Use an existing role. Choose the role that you created in previous exercise 
-	Now that your function is created, go ahead and copy the code from and paste it in the editor: https://github.com/stuffbyt/reInvent2019BuildersSession/blob/master/EasyToComplex.js
-	Once the code has been successfully copied, go ahead and save your code. To save your code version, click on “Save” button on the top rightmost screen.

Deploying your code to CloudFront edge locations

-	Before we deploy the code, for this exercise we would have to remove the trigger we applied in the previous exercise, because we can only have one Lambda function associated per trigger. In a production environment, you can combine multiple actions into one Lambda function. 
-	If you scroll up from the code editor, you should see Designer filed where you would see an option to add a trigger. Click on that, and select CloudFront from the dropdown. 
-	Click on Deploy to Lambda@Edge 
-	In the Distribution field, select your CloudFront distribution ID
-	In the Cache Behavior, select * (That’s the default cache behavior)
-	In the CloudFront event, we will select Origin Response. The reason for this event is that we want to send the HSTS headers in our responses to the client 
-	Acknowledge the message and click on Deploy.

Now to test this, let’s make a request to your CloudFront distribution with the following URL in your browser:

https://d123.cloudfront.net/winterwear/brownsweater 

You will see that browser will show cat.jpg in the browser which is the backend URL

https://d123.cloudfront.net/test/1/2/3/cat.jpg

You can use this process for any complex URLs in case of dynamic content with query strings. For example, www.example.com/sweater/browncoat?this=test;object=new can be represented with a simpler URL and on the client side, which would help you improve your SEO. 
